'use client';

import { useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/auth';
import { createClient } from '@/lib/supabase/client';
import { motion, AnimatePresence } from 'framer-motion';
import { format, startOfDay, endOfDay, isSameDay } from 'date-fns';
import FinanceSection from '@/components/FinanceSection';
import LoggingCards from '@/components/LoggingCards';
import SpendingChart from '@/components/PlaceholderChart';
import InsightsSection from '@/components/InsightsSection';
import Tooltip from '@/components/Tooltip';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer } from 'recharts';
import RoadmapSection from '@/components/RoadmapSection';
import { FaPaypal, FaBitcoin, FaApple, FaGoogle, FaAmazon, FaFacebook, FaUber, FaShoppingBag, FaRegCreditCard, FaReceipt } from 'react-icons/fa';
import { SiEthereum, SiTether, SiTesla, SiNetflix, SiStarbucks } from 'react-icons/si';
import React from 'react';
import ReceiptUpload from '@/components/ReceiptUpload';
import DatabaseSetupNotice from '@/components/DatabaseSetupNotice';
import NeedVsWantSelector from '@/components/NeedVsWantSelector';
import AIInsightDisplay from '@/components/AIInsightDisplay';

// Placeholder data - in real app would come from API
const analyticsData = {
  moodConsistency: {
    value: 'Stable',
    trend: '+4.3%',
    label: 'Mood Consistency',
    tooltip: 'Steady moods help reduce emotional spending',
    explanation: 'This score reflects how steady your mood has been over the past 7 days.\n\nConsistency helps reduce emotional spending.\n\nCalculated based on your daily mood log variance.'
  },
  moodMoneyScore: {
    value: '92.3%',
    trend: '+0.8%',
    label: 'Mood X Money Score',
    tooltip: 'How well your mood and spending align',
    explanation: 'Shows how aligned your spending is with your emotional state.\n\nA higher score means you\'re less likely to spend impulsively on low-mood days.'
  },
  calmCapital: {
    value: '756',
    trend: '+11.2%',
    label: 'Calm Capital',
    tooltip: 'Your cushion to stay cool during chaos',
    explanation: 'This number reflects your emotional resilience in high-spending situations.\n\nBased on mood stability during financial peaks or stress days.'
  },
  spendingScore: {
    value: '$2.4K',
    trend: '-12.5%',
    label: 'Monthly Spending',
    tooltip: 'Track your monthly spending patterns',
    explanation: 'Tracks your total spending logged this month.\n\nLower spending during consistent moods is seen as a positive sign of control.'
  }
};

interface ChartData {
  date: string;
  mood: number | null;
  spending: number | null;
}

const generatePlaceholderData = (userData: ChartData[]): ChartData[] => {
  // Get today's date and create array of last 7 days
  const today = new Date();
  const dateRange = Array.from({ length: 7 }, (_, i) => {
    const date = new Date(today);
    date.setDate(date.getDate() - (6 - i));
    return format(date, 'MMM d');
  });

  // Create a map of all dates with default null values
  const combinedData: { [key: string]: ChartData } = {};
  dateRange.forEach(date => {
    combinedData[date] = {
      date,
      mood: null,
      spending: null
    };
  });

  // Fill in any existing user data
  userData.forEach(data => {
    if (combinedData[data.date]) {
      // Ensure mood is a number between 1-10
      let mood = data.mood;
      if (typeof mood === 'string') {
        mood = parseFloat(mood);
      }
      mood = typeof mood === 'number' && !isNaN(mood) ? Math.min(10, Math.max(1, mood)) : null;
      
      // Ensure spending data is properly formatted
      let spending = data.spending;
      if (typeof spending === 'string') {
        spending = parseFloat(spending);
      }
      spending = typeof spending === 'number' && !isNaN(spending) ? spending : null;
      
      combinedData[data.date] = {
        ...data,
        mood,
        spending
      };
      
      console.log(`Processed data for ${data.date}: mood=${mood}, spending=${spending}`);
    }
  });

  // Return sorted array of data points
  return Object.values(combinedData)
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
};

const welcomeMessages = [
  {
    text: "Welcome back, {name}. Let's grow a little today.",
    style: "text-gray-600"
  },
  {
    text: "Good to see you, {name} 👋 You're one step closer to calm.",
    style: "text-gray-600"
  },
  {
    text: "{name}, your clarity starts here.",
    style: "text-gray-600"
  }
];

const mockTransactions = [
  {
    id: 'tx1',
    name: 'Starbucks',
    date: '2024-06-01',
    amount: 5.75,
    category: 'Coffee Shop',
    account_id: 'mock-account-1',
    pending: false
  },
  {
    id: 'tx2',
    name: 'Whole Foods',
    date: '2024-05-31',
    amount: 54.12,
    category: 'Groceries',
    account_id: 'mock-account-1',
    pending: false
  },
  {
    id: 'tx3',
    name: 'Uber',
    date: '2024-05-30',
    amount: 18.40,
    category: 'Transport',
    account_id: 'mock-account-1',
    pending: false
  },
  {
    id: 'tx4',
    name: 'Netflix',
    date: '2024-05-29',
    amount: 15.99,
    category: 'Subscription',
    account_id: 'mock-account-1',
    pending: false
  },
  {
    id: 'tx5',
    name: 'Amazon',
    date: '2024-05-28',
    amount: 32.50,
    category: 'Shopping',
    account_id: 'mock-account-1',
    pending: false
  }
];

const clearUserSpendingData = async (userId: string) => {
  const supabase = createClient();
  const { error } = await supabase
    .from('spending_logs')
    .delete()
    .eq('user_id', userId);
  
  if (error) {
    console.error('Error clearing spending data:', error);
  }
};

// Helper to clear all transactions for the user
const clearUserTransactions = async (userId: string) => {
  const supabase = createClient();
  const { error } = await supabase
    .from('transactions')
    .delete()
    .eq('user_id', userId);
  
  if (error) {
    console.error('Error clearing transactions:', error);
  }
};

// Helper to infer transaction type from category
const inferTransactionType = (categories: string[]) => {
  if (!categories || categories.length === 0) return 'purchase';
  const lowerCats = categories.map(cat => cat.toLowerCase());
  if (lowerCats.some(cat => cat.includes('subscription'))) return 'subscription';
  if (lowerCats.some(cat => cat.includes('bill') || cat.includes('utilities') || cat.includes('service'))) return 'bill';
  if (lowerCats.some(cat => cat.includes('transfer'))) return 'transfer';
  if (lowerCats.some(cat => cat.includes('loan'))) return 'loan';
  if (lowerCats.some(cat => cat.includes('investment'))) return 'investment';
  if (lowerCats.some(cat => cat.includes('income') || cat.includes('payroll'))) return 'income';
  return 'purchase';
};

// Portfolio summary mock data with icon components
const portfolioItems = [
  { icon: <FaPaypal size={20} className="text-blue-600" />, label: 'PayPal USD', percent: 40.87, value: '$6,291.92', color: 'blue' },
  { icon: <FaBitcoin size={20} className="text-orange-500" />, label: 'Bitcoin', percent: 26.54, value: '$4,823.43', color: 'orange' },
  { icon: <SiEthereum size={20} className="text-purple-600" />, label: 'Ethereum', percent: 16.71, value: '$2,215.32', color: 'purple' },
  { icon: <SiTether size={20} className="text-green-600" />, label: 'Tether', percent: 9.21, value: '$825.45', color: 'green' },
  { icon: <FaPaypal size={20} className="text-gray-500" />, label: 'USD Coin', percent: 6.67, value: '$600.00', color: 'gray' },
];

// Ticker items: finance/mood stats and trending stocks
const tickerItems = [
  { type: 'stat', content: <span>Weekly Budget: <span className="text-blue-900 font-bold">$450</span> <span className="text-gray-500">(32% used)</span></span> },
  { type: 'stat', content: <span>Mood Trend: <span className="text-green-700 font-bold">Stable</span> <span className="text-green-500">+4.3%</span></span> },
  { type: 'stat', content: <span>Stress Forecast: <span className="text-blue-900 font-bold">Low</span> <span className="text-yellow-600">28/100</span></span> },
  { type: 'stock', icon: <FaApple className="text-gray-900" />, ticker: 'AAPL', price: '$192.32', change: '+1.2%', up: true },
  { type: 'stock', icon: <SiTesla className="text-red-600" />, ticker: 'TSLA', price: '$672.10', change: '-2.1%', up: false },
  { type: 'stock', icon: <FaGoogle className="text-blue-700" />, ticker: 'GOOGL', price: '$2,850.00', change: '+0.8%', up: true },
  { type: 'stock', icon: <FaAmazon className="text-yellow-700" />, ticker: 'AMZN', price: '$3,400.00', change: '+0.5%', up: true },
  { type: 'stock', icon: <FaFacebook className="text-blue-600" />, ticker: 'META', price: '$320.00', change: '-0.7%', up: false },
];

// Helper to get merchant logo for transactions
function getMerchantLogo(name: string) {
  const lower = name.toLowerCase();
  if (lower.includes('starbucks')) return <SiStarbucks className="text-green-700" size={22} title="Starbucks" />;
  if (lower.includes('whole foods')) return <FaShoppingBag className="text-green-600" size={22} title="Whole Foods" />;
  if (lower.includes('uber')) return <FaUber className="text-black" size={22} title="Uber" />;
  if (lower.includes('netflix')) return <SiNetflix className="text-red-600" size={22} title="Netflix" />;
  if (lower.includes('amazon')) return <FaAmazon className="text-yellow-700" size={22} title="Amazon" />;
  
  // Check if this is a receipt transaction by looking for receipt-specific patterns
  if (lower.includes('receipt') || name.includes('Unknown Merchant')) {
    return <FaReceipt className="text-green-600" size={22} title="Receipt Upload" />;
  }
  
  return <FaRegCreditCard className="text-gray-400" size={22} title="Purchase" />;
}

export default function Dashboard() {
  const router = useRouter();
  const { user, loading, signOut } = useAuth();
  const [darkMode, setDarkMode] = useState(false);
  const [currentWelcomeIndex, setCurrentWelcomeIndex] = useState(0);
  const [welcomeMessage, setWelcomeMessage] = useState(welcomeMessages[0]);
  const loggingRef = useRef<HTMLDivElement>(null);
  const [chartData, setChartData] = useState<ChartData[]>([]);
  const [transactions, setTransactions] = useState<any[]>([]);
  const [receiptTransactions, setReceiptTransactions] = useState<any[]>([]);
  const [unclassifiedTransactions, setUnclassifiedTransactions] = useState<any[]>([]);
  const [transactionsLoading, setTransactionsLoading] = useState(false);
  const settingsRef = useRef<HTMLDivElement>(null);
  const [activeSection, setActiveSection] = useState('dashboard');
  const [showChart, setShowChart] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [dataLoggingSuccess, setDataLoggingSuccess] = useState(false);
  const [spendingEntryCount, setSpendingEntryCount] = useState<number | null>(null);
  const [showReceiptUpload, setShowReceiptUpload] = useState(false);
  const [tablesExist, setTablesExist] = useState(true);
  const [isTransactionOverviewExpanded, setIsTransactionOverviewExpanded] = useState(false);
  const [archiveFilter, setArchiveFilter] = useState('all'); // 'all' or 'archived'
  const [timeFilter, setTimeFilter] = useState('today');

  const supabase = createClient();

  // Helper function to filter transactions by time period
  const filterTransactionsByTime = (transactions: any[], timeFilter: string) => {
    if (timeFilter === 'all') {
      return transactions;
    }

    const now = new Date();
    
    return transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      
      // Normalize dates to remove time component for accurate comparison
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const transactionDateNormalized = new Date(transactionDate.getFullYear(), transactionDate.getMonth(), transactionDate.getDate());
      
      console.log('Date comparison:', {
        filter: timeFilter,
        transactionDate: transaction.date,
        transactionDateNormalized: transactionDateNormalized.toISOString(),
        today: today.toISOString(),
        isToday: transactionDateNormalized.getTime() === today.getTime()
      });
      
      switch (timeFilter) {
        case 'today':
          return transactionDateNormalized.getTime() === today.getTime();
        case 'yesterday':
          const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
          return transactionDateNormalized.getTime() === yesterday.getTime();
        case 'week':
          const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
          return transactionDateNormalized >= weekAgo;
        case 'month':
          const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
          return transactionDateNormalized >= monthStart;
        default:
          return true;
      }
    });
  };

  useEffect(() => {
    if (!loading && !user) {
      router.push('/');
    }
  }, [user, loading, router]);

  // Check if database tables exist
  useEffect(() => {
    if (!user) return;

    const checkTablesExist = async () => {
      try {
        // Try a simple query to check if tables exist
        const { error: moodError } = await supabase
          .from('mood_logs')
          .select('id')
          .limit(1);

        const { error: spendingError } = await supabase
          .from('spending_logs')
          .select('id')
          .limit(1);

        const { error: transactionError } = await supabase
          .from('transactions')
          .select('id')
          .limit(1);

        // If any table doesn't exist, set tablesExist to false
        if (
          moodError?.message?.includes('relation') ||
          spendingError?.message?.includes('relation') ||
          transactionError?.message?.includes('relation')
        ) {
          setTablesExist(false);
          console.warn('Database tables not found. Please create them using the SQL in SUPABASE_SETUP.md');
        } else {
          setTablesExist(true);
          console.log('Database tables verified successfully');
        }
      } catch (error) {
        console.warn('Could not verify database tables:', error);
        setTablesExist(false);
      }
    };

    checkTablesExist();
  }, [user, supabase]);

  // Fetch mood data from Supabase
  useEffect(() => {
    if (!user) return;

    const fetchMoodData = async () => {
      try {
        const { data, error } = await supabase
          .from('mood_logs')
          .select('*')
          .eq('user_id', user.id)
          .order('date', { ascending: false })
          .limit(7);

        if (error) {
          // Check if it's a table doesn't exist error
          if (error.message?.includes('relation "mood_logs" does not exist')) {
            setTablesExist(false);
            setChartData(generatePlaceholderData([]));
            return;
          }
          
          // Check for RLS policy errors
          if (error.message?.includes('RLS') || error.message?.includes('policy') || error.code === 'PGRST116') {
            console.warn('Mood data access restricted by Row Level Security policies. This is normal for new setups.');
            setChartData(generatePlaceholderData([]));
            return;
          }
          
          // Silent handling for all database errors - they're not useful in console
          setChartData(generatePlaceholderData([]));
          return;
        }

        if (data && data.length > 0) {
          const formattedData = data.map(entry => ({
            date: format(new Date(entry.date), 'MMM d'),
            mood: entry.mood,
            spending: entry.spending || null
          }));

          setChartData(generatePlaceholderData(formattedData));
        } else {
          // No data yet, use empty placeholder
          setChartData(generatePlaceholderData([]));
        }
      } catch (error) {
        // Silent error handling - just set empty data
        setChartData(generatePlaceholderData([]));
      }
    };

    fetchMoodData();
  }, [user, supabase]);

  // Fetch spending data from Supabase
  useEffect(() => {
    if (!user) return;

    const fetchSpendingData = async () => {
      try {
        const { data, error } = await supabase
          .from('spending_logs')
          .select('*')
          .eq('user_id', user.id)
          .order('date', { ascending: false })
          .limit(7);

        if (error) {
          // Check if it's a table doesn't exist error
          if (error.message?.includes('relation "spending_logs" does not exist')) {
            setTablesExist(false);
            return;
          }
          
          // Check for RLS policy errors
          if (error.message?.includes('RLS') || error.message?.includes('policy') || error.code === 'PGRST116') {
            console.warn('Spending data access restricted by Row Level Security policies. This is normal for new setups.');
            return;
          }
          
          // Silent handling for all database errors - they're not useful in console
          return;
        }

        if (data && data.length > 0) {
          // Merge spending data with existing chart data
          setChartData(prevData => {
            const updatedData = [...prevData];
            data.forEach(spendingEntry => {
              const dateStr = format(new Date(spendingEntry.date), 'MMM d');
              const existingIndex = updatedData.findIndex(item => item.date === dateStr);
              if (existingIndex !== -1) {
                updatedData[existingIndex].spending = spendingEntry.amount;
              }
            });
            return updatedData;
          });
        }
      } catch (error) {
        // Silent error handling
      }
    };

    fetchSpendingData();
  }, [user, supabase]);

  // Fetch transactions from Supabase
  useEffect(() => {
    const fetchTransactionsFromSupabase = async () => {
      if (!user) return;
      
      try {
        setTransactionsLoading(true);
        
        const { data, error } = await supabase
          .from('transactions')
          .select('id, user_id, name, amount, date, category, source, confidence, items, file_name, need_vs_want, mood_at_purchase, ai_insight, archived, created_at, updated_at')
          .eq('user_id', user.id)
          .order('date', { ascending: false });
        
        if (error) {
          // If error includes column doesn't exist, fall back to basic fields
          if (error.message?.includes('column') && error.message?.includes('does not exist')) {
            console.warn('New AI fields not yet migrated, using basic transaction fields');
            const { data: basicData, error: basicError } = await supabase
              .from('transactions')
              .select('id, user_id, name, amount, date, category, source, confidence, items, file_name, created_at, updated_at')
              .eq('user_id', user.id)
              .order('date', { ascending: false });
              
            if (basicError) {
              throw basicError;
            }
            
            // Process basic data without AI fields
            if (basicData && basicData.length > 0) {
              const transactionsData = basicData.map(tx => ({
                transaction_id: tx.id,
                id: tx.id,
                name: tx.name,
                date: tx.date,
                amount: tx.amount,
                category: tx.category || [],
                source: tx.source || 'receipt',
                confidence: tx.confidence,
                need_vs_want: null,
                mood_at_purchase: null,
                ai_insight: null,
                archived: false
              }));
              
              setTransactions(transactionsData);
              setReceiptTransactions(transactionsData.filter(tx => tx.source === 'receipt'));
              setUnclassifiedTransactions(transactionsData.filter(tx => tx.source === 'receipt'));
            } else {
              setTransactions([]);
              setReceiptTransactions([]);
              setUnclassifiedTransactions([]);
            }
            setTransactionsLoading(false);
            return;
          }
          throw error;
        }

        if (data && data.length > 0) {
          const transactionsData = data.map(tx => ({
            transaction_id: tx.id,
            id: tx.id,
            name: tx.name,
            date: tx.date,
            amount: tx.amount,
            category: tx.category || [],
            source: tx.source || 'receipt',
            confidence: tx.confidence,
            need_vs_want: tx.need_vs_want || null,
            mood_at_purchase: tx.mood_at_purchase || null,
            ai_insight: tx.ai_insight || null,
            archived: tx.archived || false
          }));
          
          setTransactions(transactionsData);
          setReceiptTransactions(transactionsData.filter(tx => tx.source === 'receipt'));
          
          // Set unclassified transactions (those without need_vs_want classification)
          setUnclassifiedTransactions(
            transactionsData.filter(tx => tx.source === 'receipt' && !tx.need_vs_want)
          );
        } else {
          setTransactions([]);
          setReceiptTransactions([]);
          setUnclassifiedTransactions([]);
        }
        
        setTransactionsLoading(false);
      } catch (error) {
        // Silent error handling for unexpected errors
        console.warn('Unable to fetch transactions. This might be due to database permissions.');
        setTransactionsLoading(false);
        setTransactions([]);
        setReceiptTransactions([]);
        setUnclassifiedTransactions([]);
      }
    };
    
    fetchTransactionsFromSupabase();
  }, [user, supabase]);

  // Function to handle receipt analysis results
  const handleReceiptAnalyzed = async (receiptData: any) => {
    if (!user?.id) {
      console.error('No user ID available');
      return;
    }

    try {
      console.log('📝 Processing receipt upload...');

      // Generate AI insight if we have the user's classification and mood
      let aiInsight = null;
      if (receiptData.needVsWant && receiptData.mood) {
        console.log('🧠 Generating AI insight...');
        try {
          const response = await fetch('/api/generate-insight', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              merchant: receiptData.merchant || 'Unknown Merchant',
              category: receiptData.category || 'General',
              amount: Math.abs(receiptData.amount),
              mood: receiptData.mood,
              needVsWant: receiptData.needVsWant
            })
          });
          
          if (response.ok) {
            const result = await response.json();
            aiInsight = result.insight;
            console.log('✅ AI insight generated successfully');
          } else {
            console.error('❌ AI insight generation failed:', response.status);
          }
        } catch (insightError) {
          console.error('❌ Error generating AI insight:', insightError);
        }
      } else {
        console.log('⚠️ Partial data - skipping AI insight generation');
      }

      console.log('Receipt data received:', {
        merchant: receiptData.merchant,
        amount: receiptData.amount,
        needVsWant: receiptData.needVsWant,
        mood: receiptData.mood,
        aiInsight: aiInsight
      });

      // Create a simplified transaction object with AI fields
      const todaysDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
      const receiptTransaction = {
        user_id: user.id,
        name: receiptData.merchant || 'Unknown Merchant',
        amount: Math.abs(receiptData.amount),
        date: todaysDate, // Always use today's date
        category: Array.isArray(receiptData.category) ? receiptData.category : [receiptData.category || 'General'],
        source: 'receipt',
        confidence: receiptData.confidence || 0.8,
        items: receiptData.items || null,
        file_name: receiptData.fileName || null,
        need_vs_want: (receiptData.needVsWant === 'Need' || receiptData.needVsWant === 'Want') ? receiptData.needVsWant : null,
        mood_at_purchase: receiptData.mood || null,
        ai_insight: aiInsight
      };

      console.log('💾 Saving receipt to database with date:', receiptTransaction.date);
      
      // Save to database with better error handling
      let transactionData;
      try {
        // Try to insert with AI fields first
        const { data, error } = await supabase
          .from('transactions')
          .insert([receiptTransaction])
          .select();
        
        if (error) {
          // If error is about missing columns, try without AI fields
          if (error.message?.includes('column') && error.message?.includes('does not exist')) {
            console.warn('AI fields not available, saving basic transaction only');
            const basicTransaction = {
              user_id: user.id,
              name: receiptData.merchant || 'Unknown Merchant',
              amount: Math.abs(receiptData.amount),
              date: todaysDate,
              category: Array.isArray(receiptData.category) ? receiptData.category : [receiptData.category || 'General'],
              source: 'receipt',
              confidence: receiptData.confidence || 0.8,
              items: receiptData.items || null,
              file_name: receiptData.fileName || null
            };
            
            const { data: basicData, error: basicError } = await supabase
              .from('transactions')
              .insert([basicTransaction])
              .select();
              
            if (basicError) {
              console.error('Error saving transaction:', basicError.message);
            } else {
              console.log('✅ Basic transaction saved successfully');
              transactionData = basicData;
            }
          } else {
            console.error('Error saving transaction:', error.message);
          }
        } else {
          console.log('✅ Transaction with AI fields saved successfully');
          transactionData = data;
        }
      } catch (insertError) {
        console.error('Unexpected error during transaction insert:', insertError);
      }
      
      // Save spending log
      const spendingLog = {
        user_id: user.id,
        amount: receiptData.amount,
        date: todaysDate,
        category: receiptData.category || 'General',
        merchant: receiptData.merchant || 'Unknown Merchant',
        source: 'receipt'
      };
      
      const { data: spendingData, error: spendingError } = await supabase
        .from('spending_logs')
        .insert([spendingLog])
        .select();

      if (spendingError) {
        if (spendingError.message?.includes('RLS') || spendingError.message?.includes('policy')) {
          console.warn('Spending log save restricted by database policies. Receipt will still appear in UI.');
        } else if (spendingError.message && spendingError.message.trim() !== '') {
          console.error('Error saving spending log:', spendingError.message);
        }
      } else {
        console.log('✅ Spending log saved to database successfully');
      }

      // Update local state regardless of database save status
      const displayTransaction = {
        transaction_id: `receipt_${Date.now()}`,
        id: transactionData?.[0]?.id || `receipt_${Date.now()}`,
        name: receiptData.merchant || 'Unknown Merchant',
        amount: -receiptData.amount, // Negative for display (spending)
        date: todaysDate, // Always use today's date
        category: [receiptData.category || 'General'],
        source: 'receipt',
        confidence: receiptData.confidence,
        need_vs_want: (receiptData.needVsWant === 'Need' || receiptData.needVsWant === 'Want') ? receiptData.needVsWant : null,
        mood_at_purchase: receiptData.mood || null,
        ai_insight: aiInsight,
        archived: false
      };

      console.log('📋 Adding transaction to display with date:', displayTransaction.date);
      console.log('📋 Display transaction:', displayTransaction);

      setReceiptTransactions(prev => [displayTransaction, ...prev]);
      setTransactions(prev => {
        const updated = [displayTransaction, ...prev];
        console.log('📋 Total transactions after update:', updated.length);
        return updated;
      });

      // No need to add to unclassified since it's already classified during upload

      // Update chart data
      setChartData(prevData => {
        const updatedData = [...prevData];
        const dateStr = format(new Date(todaysDate), 'MMM d');
        const existingIndex = updatedData.findIndex(item => item.date === dateStr);
        if (existingIndex !== -1) {
          const currentSpending = updatedData[existingIndex].spending || 0;
          updatedData[existingIndex].spending = currentSpending + receiptData.amount;
        }
        return updatedData;
      });

      console.log('🎉 Receipt processed successfully and added to your transaction history!');
    } catch (error) {
      console.error('Error processing receipt:', error);
    }
  };

  // Function to handle Need vs Want classification updates
  const handleNeedVsWantUpdate = async (transactionId: string, needVsWant: string, mood?: string) => {
    if (!user?.id) {
      console.error('No user ID available');
      return;
    }

    try {
      // Update the transaction in the database
      const updateData: any = { need_vs_want: needVsWant };
      if (mood) {
        updateData.mood_at_purchase = mood;
        
        // Generate new AI insight based on mood if provided
        const transaction = transactions.find(t => t.id === transactionId);
        if (transaction) {
          const response = await fetch('/api/generate-insight', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              merchant: transaction.name,
              category: Array.isArray(transaction.category) ? transaction.category[0] : transaction.category,
              amount: Math.abs(transaction.amount),
              mood: mood,
              needVsWant: needVsWant
            })
          });
          
          if (response.ok) {
            const { insight } = await response.json();
            updateData.ai_insight = insight;
          }
        }
      }

      const { error } = await supabase
        .from('transactions')
        .update(updateData)
        .eq('id', transactionId);

      if (error) {
        if (error.message?.includes('column') && error.message?.includes('does not exist')) {
          console.warn('AI fields not available for update, classification not saved to database');
          // Still update local state even if database update fails
          setTransactions(prev => prev.map(t => 
            t.id === transactionId 
              ? { ...t, need_vs_want: needVsWant, mood_at_purchase: mood }
              : t
          ));

          setReceiptTransactions(prev => prev.map(t => 
            t.id === transactionId 
              ? { ...t, need_vs_want: needVsWant, mood_at_purchase: mood }
              : t
          ));

          // Remove from unclassified transactions
          setUnclassifiedTransactions(prev => prev.filter(t => t.id !== transactionId));
          console.log('✅ Transaction classification updated locally (database not updated)');
        } else {
          console.error('Error updating transaction:', error.message);
        }
        return;
      }

      // Update local state
      setTransactions(prev => prev.map(t => 
        t.id === transactionId 
          ? { ...t, need_vs_want: needVsWant, mood_at_purchase: mood, ai_insight: updateData.ai_insight || t.ai_insight }
          : t
      ));

      setReceiptTransactions(prev => prev.map(t => 
        t.id === transactionId 
          ? { ...t, need_vs_want: needVsWant, mood_at_purchase: mood, ai_insight: updateData.ai_insight || t.ai_insight }
          : t
      ));

      // Remove from unclassified transactions
      setUnclassifiedTransactions(prev => prev.filter(t => t.id !== transactionId));

      console.log('✅ Transaction classification updated successfully');
    } catch (error) {
      console.error('Error updating transaction classification:', error);
    }
  };

  // Function to handle transaction deletion
  const handleDeleteTransaction = async (transactionId: string) => {
    if (!user?.id) {
      console.error('No user ID available');
      return;
    }

    if (!confirm('Are you sure you want to delete this transaction? This action cannot be undone.')) {
      return;
    }

    try {
      const { error } = await supabase
        .from('transactions')
        .delete()
        .eq('id', transactionId)
        .eq('user_id', user.id); // Extra security check

      if (error) {
        console.error('Error deleting transaction:', error.message);
        return;
      }

      // Remove from local state
      setTransactions(prev => prev.filter(t => t.id !== transactionId));
      setReceiptTransactions(prev => prev.filter(t => t.id !== transactionId));
      setUnclassifiedTransactions(prev => prev.filter(t => t.id !== transactionId));

      console.log('✅ Transaction deleted successfully');
    } catch (error) {
      console.error('Error deleting transaction:', error);
    }
  };

  // Function to archive a transaction
  const handleArchiveTransaction = async (transactionId: string) => {
    if (!user?.id) return;

    try {
      const { error } = await supabase
        .from('transactions')
        .update({ archived: true })
        .eq('id', transactionId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error archiving transaction:', error.message);
        return;
      }

      // Update local state
      setTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: true } : t
      ));
      setReceiptTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: true } : t
      ));
      setUnclassifiedTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: true } : t
      ));

      console.log('✅ Transaction archived successfully');
    } catch (error) {
      console.error('Error archiving transaction:', error);
    }
  };

  // Function to unarchive a transaction
  const handleUnarchiveTransaction = async (transactionId: string) => {
    if (!user?.id) return;

    try {
      const { error } = await supabase
        .from('transactions')
        .update({ archived: false })
        .eq('id', transactionId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error unarchiving transaction:', error.message);
        return;
      }

      // Update local state
      setTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: false } : t
      ));
      setReceiptTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: false } : t
      ));
      setUnclassifiedTransactions(prev => prev.map(t => 
        t.id === transactionId ? { ...t, archived: false } : t
      ));

      console.log('✅ Transaction unarchived successfully');
    } catch (error) {
      console.error('Error unarchiving transaction:', error);
    }
  };

  useEffect(() => {
    // Rotate welcome message when user logs in
    if (user) {
      const interval = setInterval(() => {
        setCurrentWelcomeIndex((prev) => (prev + 1) % welcomeMessages.length);
      }, 4000);
      return () => clearInterval(interval);
    }
  }, [user]);

  useEffect(() => {
    setWelcomeMessage(welcomeMessages[currentWelcomeIndex]);
  }, [currentWelcomeIndex]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (settingsRef.current && !settingsRef.current.contains(event.target as Node)) {
        setShowSettings(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    if (!darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  const scrollToLogging = () => {
    if (loggingRef.current) {
      loggingRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const renderContent = () => {
    // Remove global gating: always show dashboard
    switch (activeSection) {
      case 'finances':
        return <FinanceSection />;
      case 'insights':
        return <InsightsSection />;
      case 'roadmap':
        return <RoadmapSection />;
      case 'dashboard':
        return (
          <div className="min-h-screen">
            {/* Top Bar with Stock Ticker Animation */}
            <div className="w-full rounded-xl bg-white shadow flex items-center px-0 py-0 mb-8 overflow-hidden relative" style={{ height: '56px' }}>
              <div className="absolute left-0 top-0 w-full h-full pointer-events-none z-10" style={{ pointerEvents: 'none' }}></div>
              <div
                className="flex items-center gap-10 whitespace-nowrap animate-ticker px-6 text-sm font-medium h-full"
                style={{ animation: 'ticker 30s linear infinite', background: 'white' }}
                onMouseEnter={e => (e.currentTarget.style.animationPlayState = 'paused')}
                onMouseLeave={e => (e.currentTarget.style.animationPlayState = 'running')}
              >
                {/* Repeat ticker content twice for seamless loop, with unique key on fragment */}
                {[...Array(2)].map((_, i) => (
                  <React.Fragment key={i}>
                    {tickerItems.map((item, idx) => (
                      item.type === 'stat' ? (
                        <span key={`stat-${idx}`}>{item.content}</span>
                      ) : (
                        <span key={`stock-${item.ticker}`} className="flex items-center gap-2">
                          <span className="flex items-center">{item.icon}<span className="ml-1 font-bold">{item.ticker}</span></span>
                          <span className="text-gray-900">{item.price}</span>
                          <span className={`ml-1 px-2 py-0.5 rounded text-xs font-semibold ${item.up ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-600'}`}>{item.change}</span>
                      </span>
                      )
                    ))}
                  </React.Fragment>
                ))}
                  </div>
              <style>{`
                @keyframes ticker {
                  0% { transform: translateX(0); }
                  100% { transform: translateX(-50%); }
                }
                .animate-ticker {
                  will-change: transform;
                }
              `}</style>
                </div>

            {/* Database Setup Notice */}
            {!tablesExist && (
              <DatabaseSetupNotice darkMode={darkMode} />
            )}

            {/* Backdrop for expanded card */}
            {isTransactionOverviewExpanded && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 backdrop-blur-sm z-40"
                onClick={() => setIsTransactionOverviewExpanded(false)}
              />
            )}

            {/* Main Content: Graph and Sidebar Cards */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8 items-stretch">
              {/* Left: Main Graph (spans two columns) */}
              <div className="lg:col-span-2 flex flex-col justify-stretch">
                <div className="bg-white rounded-xl shadow p-6 h-full flex flex-col justify-center">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-semibold">Balance & Spending Over Time</h2>
            </div>
                  <div className="flex-1 min-h-[300px]">
                    {/* Skeleton loader for chart if loading */}
            {loading ? (
                      <div className="w-full h-64 flex items-center justify-center">
                        <div className="animate-pulse w-full h-48 bg-gray-100 rounded-xl" />
              </div>
                    ) : (
                      <SpendingChart transactions={transactions} />
                    )}
                  </div>
                  </div>
                </div>
              {/* Right: Portfolio Summary above Log Mood */}
              <div className="flex flex-col gap-6 h-full justify-stretch">
                {/* Transaction Overview Card (expandable) */}
                <motion.div 
                  className={`bg-white rounded-xl shadow p-6 flex flex-col items-start w-full justify-between ${
                    isTransactionOverviewExpanded ? 'fixed top-16 left-1/2 transform -translate-x-1/2 z-50 w-[90vw] max-w-4xl h-[80vh]' : 'max-h-64 min-h-[180px]'
                  }`}
                  layout
                  animate={{
                    scale: isTransactionOverviewExpanded ? 1 : 1,
                    opacity: 1
                  }}
                  transition={{
                    duration: 0.3,
                    ease: "easeInOut"
                  }}
                >
                  <div className="flex items-center w-full justify-between mb-3">
                    <h3 className="text-base font-semibold text-gray-900">Transaction Overview</h3>
                    <div className="flex items-center gap-2">
                      <select
                        value={archiveFilter}
                        onChange={(e) => setArchiveFilter(e.target.value)}
                        className="text-xs border border-gray-300 rounded px-2 py-1 bg-white text-gray-700"
                      >
                        <option value="all">All Time</option>
                        <option value="archived">Archived</option>
                      </select>
                      <button
                        onClick={() => setIsTransactionOverviewExpanded(!isTransactionOverviewExpanded)}
                        className="text-xs text-blue-600 hover:text-blue-700 font-medium flex items-center gap-1"
                      >
                        {isTransactionOverviewExpanded ? 'Collapse' : 'Expand'}
                        <svg 
                          className={`w-4 h-4 transition-transform ${isTransactionOverviewExpanded ? 'rotate-180' : ''}`} 
                          fill="none" 
                          stroke="currentColor" 
                          viewBox="0 0 24 24"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  {/* Content area - scrollable if needed */}
                  <div className={`w-full flex flex-col gap-3 ${
                    isTransactionOverviewExpanded ? 'overflow-y-auto flex-1' : 'overflow-y-auto'
                  }`} style={{ maxHeight: isTransactionOverviewExpanded ? 'calc(80vh - 120px)' : '9.5rem' }}>
                    {transactions.length === 0 ? (
                      <div className="text-center py-4">
                        <div className="text-gray-400 mb-2">
                          <svg className="w-8 h-8 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <p className="text-sm text-gray-500">No transactions yet</p>
                        <p className="text-xs text-gray-400 mt-1">Upload receipts to start tracking</p>
                      </div>
                    ) : (
                      <>
                        {/* Show all transactions when expanded, or just 2 when collapsed */}
                        {transactions
                          .filter(transaction => {
                            // Simple filter: show archived if filter is 'archived', otherwise show non-archived
                            return archiveFilter === 'archived' 
                              ? transaction.archived === true 
                              : transaction.archived !== true;
                          })
                          .slice(0, isTransactionOverviewExpanded ? undefined : 2)
                          .map((transaction) => {
                            return (
                          <div key={transaction.id} className="border border-gray-300 rounded-lg p-4 bg-gray-50">
                            {/* Always show transaction details first */}
                            <div className="mb-3">
                              <div className="flex items-center justify-between text-sm">
                                <div className="flex items-center gap-3">
                                  <span className="font-medium text-gray-900">{transaction.name}</span>
                                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                                    transaction.need_vs_want === 'Need' 
                                      ? 'bg-blue-100 text-blue-800' 
                                      : transaction.need_vs_want === 'Want'
                                      ? 'bg-orange-100 text-orange-800'
                                      : 'bg-gray-100 text-gray-600'
                                  }`}>
                                    {transaction.need_vs_want || 'Processing...'}
                                  </span>
                                  <span className="font-medium text-gray-900">${Math.abs(transaction.amount).toFixed(2)}</span>
                                  {transaction.mood_at_purchase && (
                                    <span className="text-sm text-gray-600">
                                      | Mood: {transaction.mood_at_purchase.split(':')[0]}
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>

                            {/* Show AI insight if available */}
                            {transaction.ai_insight && (
                              <div className="border-t border-gray-200 pt-3">
                                <div className="text-sm font-medium text-gray-800 mb-2">AI Insight:</div>
                                <div className="text-sm text-gray-700 leading-relaxed bg-blue-50 p-3 rounded-lg">
                                  "{transaction.ai_insight}"
                                </div>
                              </div>
                            )}
                            
                            {/* Show processing message if no insight yet */}
                            {!transaction.ai_insight && transaction.need_vs_want && (
                              <div className="border-t border-gray-200 pt-3">
                                <div className="text-sm text-yellow-700 bg-yellow-50 p-3 rounded-lg">
                                  AI insight is being generated...
                                </div>
                              </div>
                            )}
                          </div>
                        );})}
                        
                        {(() => {
                          const filtered = filterTransactionsByTime(transactions, timeFilter);
                          console.log('🚨 FILTER DEBUG:', {
                            totalTransactions: transactions.length,
                            timeFilter,
                            filteredCount: filtered.length,
                            todaysDate: new Date().toISOString().split('T')[0]
                          });
                          if (filtered.length === 0) {
                            console.error('❌ NO TRANSACTIONS AFTER FILTERING!');
                            console.error('All transactions:', transactions.map(t => `${t.name} - ${t.date}`));
                          }
                          return null;
                        })()}

                        {transactions
                          .filter(transaction => {
                            return archiveFilter === 'archived' 
                              ? transaction.archived === true 
                              : transaction.archived !== true;
                          }).length === 0 && (
                            <div className="text-center py-2">
                              <p className="text-sm text-gray-500">
                                {archiveFilter === 'archived' ? 'No archived transactions' : 'No transactions yet'}
                              </p>
                            </div>
                          )}
                      </>
                    )}
                  </div>
                </motion.div>
                {/* Mood Trend Card (replaces Log Mood) */}
                <div className="bg-white rounded-xl shadow p-6 flex flex-col items-start w-full min-h-[180px] justify-between">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Mood Trend</h3>
                  <div className="flex items-start mb-2 w-full justify-between">
                    <span className="text-4xl font-bold text-gray-900">56%</span>
                    <span className="flex items-center text-base font-medium text-gray-700 mt-1">
                      <span className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></span>
                      Neutral
                    </span>
                  </div>
                  {/* Horizontal colored bar with indicator */}
                  <div className="w-full flex flex-col items-center mb-2">
                    <div className="relative w-full h-5 flex items-center justify-between bg-white rounded">
                      {/* Colored bar segments */}
                      <div className="absolute left-0 top-1/2 -translate-y-1/2 w-full h-2 rounded-full bg-gradient-to-r from-red-400 via-yellow-300 via-green-300 to-green-500"></div>
                      {/* Indicator dot (56%) */}
                      <div className="absolute top-1/2 -translate-y-1/2 left-0" style={{ left: '56%' }}>
                        <div className="w-4 h-4 bg-black rounded-full border-2 border-white shadow"></div>
                      </div>
                      <span className="text-xs text-gray-500 absolute left-0 -bottom-5">Index: 0%</span>
                      <span className="text-xs text-gray-500 absolute right-0 -bottom-5">Index: 100%</span>
                    </div>
                  </div>
                  {/* Below bar: Yesterday and Last Month */}
                  <div className="flex w-full justify-between mt-4">
                    <div className="flex flex-col items-start">
                      <span className="text-xs text-gray-500 mb-1">Yesterday</span>
                      <span className="bg-yellow-100 text-yellow-800 text-xs font-semibold px-3 py-1 rounded-full">Neutral - 50</span>
                    </div>
                    <div className="flex flex-col items-end">
                      <span className="text-xs text-gray-500 mb-1">Last Month</span>
                      <span className="bg-yellow-100 text-yellow-800 text-xs font-semibold px-3 py-1 rounded-full">Fear - 26</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Transactions Table */}
            <div className="bg-white rounded-xl shadow p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold">Transactions</h2>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => setShowReceiptUpload(true)}
                    className="inline-flex items-center px-3 py-2 bg-green-500 hover:bg-green-600 text-white text-sm font-medium rounded-lg transition-colors"
                  >
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Upload Receipt
                  </button>
                  <input type="text" placeholder="Search transactions..." className="border border-gray-300 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-200" />
                  <button className="ml-2 px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-lg border border-gray-300 text-gray-600 text-sm flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 5h18M4 9v10a1 1 0 001 1h14a1 1 0 001-1V9" /></svg>
                    Filter
                  </button>
                </div>
              </div>
              
              {/* Receipt Upload Section */}
              <div className="mb-4 p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <FaReceipt className="text-green-600" size={20} />
                    <div>
                      <h3 className="font-medium text-gray-900">Receipt Upload & Analysis</h3>
                      <p className="text-sm text-gray-600">Upload receipt photos to automatically track spending with AI analysis</p>
                    </div>
                  </div>
                  <div className="text-sm text-green-700 font-medium">
                    {receiptTransactions.length} receipts uploaded
                  </div>
                </div>
              </div>

              {/* Transactions table */}
              {transactions.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-12">
                  <FaReceipt className="text-gray-400 mb-4" size={48} />
                  <p className="text-lg text-gray-500 mb-2">No transactions yet</p>
                  <p className="text-sm text-gray-400 mb-4">Upload receipts using the "Upload Receipt" button in the chart above to start tracking your spending</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="text-gray-500">
                        <th className="py-2 px-4 text-left">Merchant</th>
                        <th className="py-2 px-4 text-right">Amount</th>
                        <th className="py-2 px-4 text-left">Category</th>
                        <th className="py-2 px-4 text-left">Classification</th>
                        <th className="py-2 px-4 text-left">Mood</th>
                        <th className="py-2 px-4 text-left">Date</th>
                      </tr>
                    </thead>
                    <tbody>
                      {transactions.map((tx, index) => (
                        <tr key={tx.transaction_id || tx.id || `tx-${index}`} className="hover:bg-gray-50 transition">
                          <td className="py-2 px-4 flex items-center gap-3">
                            {/* Merchant logo */}
                            <span className="w-7 h-7 flex items-center justify-center">{getMerchantLogo(tx.name)}</span>
                            <div>
                              <div className="font-semibold text-gray-900">{tx.name}</div>
                              <div className="text-xs text-gray-500">{Array.isArray(tx.category) ? tx.category[0] : tx.category}</div>
                            </div>
                          </td>
                          <td className={`py-2 px-4 text-right font-semibold text-red-600`}>${Math.abs(tx.amount).toFixed(2)}</td>
                          <td className="py-2 px-4">{Array.isArray(tx.category) ? tx.category[0] : tx.category}</td>
                          <td className="py-2 px-4">
                            {tx.need_vs_want ? (
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                tx.need_vs_want === 'Need' 
                                  ? 'bg-blue-100 text-blue-800' 
                                  : 'bg-orange-100 text-orange-800'
                              }`}>
                                {tx.need_vs_want}
                              </span>
                            ) : tx.source === 'receipt' ? (
                              <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600">
                                Pending
                              </span>
                            ) : (
                              <span className="text-xs text-gray-400">—</span>
                            )}
                          </td>
                          <td className="py-2 px-4">
                            {tx.mood_at_purchase ? (
                              <span className="text-sm text-gray-700">
                                {tx.mood_at_purchase.split(':')[0]}
                              </span>
                            ) : (
                              <span className="text-xs text-gray-400">No mood logged</span>
                            )}
                          </td>
                          <td className="py-2 px-4">
                            <div className="flex items-center justify-between">
                              <span className="text-sm text-gray-900">{format(new Date(tx.date), 'MMM d, yyyy')}</span>
                              <button
                                onClick={() => handleDeleteTransaction(tx.id)}
                                className="text-gray-400 hover:text-red-500 transition-colors opacity-60 hover:opacity-100 ml-2"
                                title="Delete transaction"
                              >
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1-1H9a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        );
      default:
        return <div className="p-4">Coming soon...</div>;
    }
  };

  const sidebarItems = [
    { id: 'dashboard', label: 'Dashboard', icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6' },
    { id: 'insights', label: 'Insights', icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z' },
    { id: 'roadmap', label: 'Roadmap', icon: 'M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01' },
    { id: 'finances', label: 'Finances', icon: 'M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z' },
    { id: 'wellness', label: 'Wellness', icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z' },
  ];

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-white'} flex`}>
      {/* Sidebar */}
      <div className={`w-64 ${darkMode ? 'bg-gray-900 border-gray-800' : 'bg-white border-gray-200'} border-r`}>
        <div className="p-4">
          <span className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>Vireo</span>
        </div>
        <nav className="mt-8">
          {sidebarItems.map((item) => (
            <button
              key={item.id}
              onClick={() => setActiveSection(item.id)}
              className={`w-full flex items-center space-x-3 px-4 py-3 text-sm font-medium transition-all duration-200 ${
                activeSection === item.id
                  ? 'text-green-600'
                  : darkMode 
                    ? 'text-gray-400 hover:text-green-600' 
                    : 'text-gray-600 hover:text-green-600'
              }`}
            >
              <svg
                className={`w-5 h-5 transition-all duration-200 ${
                  activeSection === item.id ? 'text-green-600' : darkMode ? 'text-gray-400 group-hover:text-green-600' : 'text-gray-600 group-hover:text-green-600'
                }`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={1.5}
                  d={item.icon}
                />
              </svg>
              <span className="group-hover:drop-shadow-[0_0_4px_rgba(22,163,74,0.5)]">{item.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        <header className={`${darkMode ? 'bg-gray-900 border-gray-800' : 'bg-white border-gray-200'} border-b`}>
          <div className="px-8 py-6 flex items-center justify-between">
            <h1 className={`text-lg ${welcomeMessage.style} leading-relaxed ${darkMode ? 'text-gray-300' : ''}`}>
              {welcomeMessage.text.replace('{name}', user?.user_metadata?.full_name?.split(' ')[0] || user?.email?.split('@')[0] || 'there')}
            </h1>
            <div className="flex items-center space-x-4">
              <button className={`${darkMode ? 'text-gray-400 hover:text-green-700' : 'text-gray-600 hover:text-green-700'}`}>
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              </button>
              <div className="relative" ref={settingsRef}>
                <button 
                  onClick={() => setShowSettings(!showSettings)}
                  className={`${darkMode ? 'text-gray-400 hover:text-green-700' : 'text-gray-600 hover:text-green-700'}`}
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </button>
                <AnimatePresence>
                  {showSettings && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2 }}
                      className={`absolute right-0 mt-2 w-48 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-lg border py-1 z-50`}
                    >
                      <button
                        onClick={() => {
                          // Handle profile click
                          setShowSettings(false);
                        }}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'} flex items-center`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        Profile
                      </button>
                      <button
                        onClick={toggleDarkMode}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'} flex items-center`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                        </svg>
                        {darkMode ? 'Light Mode' : 'Dark Mode'}
                      </button>
                      <button
                        onClick={() => {
                          // Handle notifications click
                          setShowSettings(false);
                        }}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'} flex items-center`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                        </svg>
                        Notifications
                      </button>
                      <button
                        onClick={() => {
                          // Handle help click
                          setShowSettings(false);
                        }}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'} flex items-center`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Help & Support
                      </button>
                      <div className={`border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'} my-1`}></div>
                      <button
                        onClick={async () => {
                          await signOut();
                          setShowSettings(false);
                          router.push('/');
                        }}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'text-red-400 hover:bg-gray-700' : 'text-red-600 hover:bg-gray-100'} flex items-center`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        Sign Out
                      </button>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
              <div className={`h-6 w-px ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}></div>
            </div>
          </div>
        </header>
        <div className={`p-8 ${darkMode ? 'bg-gray-900' : 'bg-white'}`}>
          {renderContent()}
        </div>
      </div>

      {/* Receipt Upload Modal */}
      <ReceiptUpload
        onReceiptAnalyzed={handleReceiptAnalyzed}
        darkMode={darkMode}
        onClose={() => setShowReceiptUpload(false)}
        isOpen={showReceiptUpload}
      />
    </div>
  );
}

function getCategoryColor(category: string | string[]): string {
  // Simple color mapping for demo; expand as needed
  const colors: { [key: string]: string } = {
    'Coffee Shop': '#F59E42',
    'Groceries': '#34D399',
    'Transport': '#60A5FA',
    'Subscription': '#A78BFA',
    'Shopping': '#F472B6',
    'default': '#9CA3AF'
  };
  if (Array.isArray(category)) category = category[0];
  return colors[category] || colors['default'];
}